apiVersion: v1
kind: ConfigMap
metadata:
  name: netbox
data:
  configuration.py: |-
    import re
    from pathlib import Path

    import yaml
    import os


    def _deep_merge(source, destination):
        """Inspired by https://stackoverflow.com/a/20666342"""
        for key, value in source.items():
            dst_value = destination.get(key)

            if isinstance(value, dict) and isinstance(dst_value, dict):
                _deep_merge(value, dst_value)
            else:
                destination[key] = value

        return destination


    def _load_yaml():
        extraConfigBase = Path("/run/config/extra")
        configFiles = [Path("/run/config/netbox/netbox.yaml")]

        configFiles.extend(sorted(extraConfigBase.glob("*/*.yaml")))

        for configFile in configFiles:
            with open(configFile, "r") as f:
                config = yaml.safe_load(f)

            _deep_merge(config, globals())


    def _load_secret(name, key):
        path = "/run/secrets/{name}/{key}".format(name=name, key=key)
        with open(path, "r") as f:
            return f.read()


    CORS_ORIGIN_REGEX_WHITELIST = list()
    DATABASE = dict()
    EMAIL = dict()
    REDIS = dict()

    _load_yaml()

    DATABASE["PASSWORD"] = _load_secret("netbox", "db_password")
    EMAIL["PASSWORD"] = _load_secret("netbox", "email_password")
    REDIS["tasks"]["PASSWORD"] = _load_secret("netbox", "tasks_password")
    REDIS["caching"]["PASSWORD"] = _load_secret("netbox", "cache_password")
    SECRET_KEY = _load_secret("netbox", "secret_key")

    # Post-process certain values
    CORS_ORIGIN_REGEX_WHITELIST = [re.compile(r) for r in CORS_ORIGIN_REGEX_WHITELIST]

  netbox.yaml: |-
    ALLOWED_HOSTS:
      - "*"

    DATABASE:
      HOST: postgresql-rw
      USER: netbox
      NAME: netbox
      PORT: 5432
      OPTIONS:
        sslmode: prefer
        target_session_attrs: read-write
      CONN_MAX_AGE: 300
      DISABLE_SERVER_SIDE_CURSORS: false

    ADMINS: []
    ALLOW_TOKEN_RETRIEVAL: false
    AUTH_PASSWORD_VALIDATORS: []
    ALLOWED_URL_SCHEMES:
      - "file"
      - "ftp"
      - "ftps"
      - "http"
      - "https"
      - "mailto"
      - "sftp"
      - "ssh"
      - "tel"
      - "telnet"
      - "tftp"
      - "vnc"
      - "xmpp"
    BANNER_TOP: ""
    BANNER_BOTTOM: ""
    BANNER_LOGIN: ""
    BASE_PATH: ""
    CHANGELOG_RETENTION: 90
    CUSTOM_VALIDATORS: {}
    DEFAULT_USER_PREFERENCES: {}
    CORS_ORIGIN_ALLOW_ALL: false
    CORS_ORIGIN_WHITELIST: []
    CORS_ORIGIN_REGEX_WHITELIST: []
    CSRF_TRUSTED_ORIGINS: []
    DATA_UPLOAD_MAX_MEMORY_SIZE: 2621440
    DEBUG: false
    DEFAULT_LANGUAGE: en-us

    EMAIL:
      SERVER: localhost
      PORT: 25
      USERNAME: ""
      USE_SSL: false
      USE_TLS: false
      SSL_CERTFILE: ""
      SSL_KEYFILE: ""
      TIMEOUT: 10
      FROM_EMAIL: ""

    ENFORCE_GLOBAL_UNIQUE: true
    EXEMPT_VIEW_PERMISSIONS: []
    FIELD_CHOICES: {}
    FILE_UPLOAD_MAX_MEMORY_SIZE: 2621440
    GRAPHQL_ENABLED: true
    HTTP_PROXIES: {}
    INTERNAL_IPS:
      - "127.0.0.1"
      - "::1"
    JOB_RETENTION: 90
    LOGGING: {}
    LOGIN_PERSISTENCE: false
    LOGIN_REQUIRED: false
    LOGIN_TIMEOUT: 1209600
    LOGOUT_REDIRECT_URL: home
    MAINTENANCE_MODE: false
    MAPS_URL: "https://maps.google.com/?q="
    MAX_PAGE_SIZE: 1000
    MEDIA_ROOT: /opt/netbox/netbox/media
    METRICS_ENABLED: false
    PAGINATE_COUNT: 50
    PLUGINS: []
    PLUGINS_CONFIG: {}
    POWERFEED_DEFAULT_AMPERAGE: 15
    POWERFEED_DEFAULT_MAX_UTILIZATION: 80
    POWERFEED_DEFAULT_VOLTAGE: 120
    PREFER_IPV4: false
    RACK_ELEVATION_DEFAULT_UNIT_HEIGHT: 22
    RACK_ELEVATION_DEFAULT_UNIT_WIDTH: 220
    REMOTE_AUTH_ENABLED: false
    REMOTE_AUTH_BACKEND:
      - netbox.authentication.RemoteUserBackend
    REMOTE_AUTH_HEADER: HTTP_REMOTE_USER
    REMOTE_AUTH_USER_FIRST_NAME: HTTP_REMOTE_USER_FIRST_NAME
    REMOTE_AUTH_USER_LAST_NAME: HTTP_REMOTE_USER_LAST_NAME
    REMOTE_AUTH_USER_EMAIL: HTTP_REMOTE_USER_EMAIL
    REMOTE_AUTH_AUTO_CREATE_USER: false
    REMOTE_AUTH_AUTO_CREATE_GROUPS: false
    REMOTE_AUTH_DEFAULT_GROUPS: []
    REMOTE_AUTH_DEFAULT_PERMISSIONS: {}
    REMOTE_AUTH_GROUP_SYNC_ENABLED: false
    REMOTE_AUTH_GROUP_HEADER: HTTP_REMOTE_USER_GROUP
    REMOTE_AUTH_SUPERUSER_GROUPS: []
    REMOTE_AUTH_SUPERUSERS: []
    REMOTE_AUTH_STAFF_GROUPS: []
    REMOTE_AUTH_STAFF_USERS: []
    REMOTE_AUTH_GROUP_SEPARATOR: "|"
    RELEASE_CHECK_URL: ""

    REDIS:
      tasks:
        HOST: task-redis
        PORT: 6379
        USERNAME: ""
        DATABASE: 0
        SSL: false
        INSECURE_SKIP_TLS_VERIFY: false
        CA_CERT_PATH: ""
      caching:
        HOST: caching-redis
        PORT: 6379
        USERNAME: ""
        DATABASE: 0
        SSL: false
        INSECURE_SKIP_TLS_VERIFY: false
        CA_CERT_PATH: ""

    REPORTS_ROOT: /opt/netbox/netbox/reports
    RQ_DEFAULT_TIMEOUT: 300
    SCRIPTS_ROOT: /opt/netbox/netbox/scripts
    CSRF_COOKIE_NAME: csrftoken
    SESSION_COOKIE_NAME: sessionid
    ENABLE_LOCALIZATION: false
    TIME_ZONE: UTC
    DATE_FORMAT: "N j, Y"
    SHORT_DATE_FORMAT: "Y-m-d"
    TIME_FORMAT: "g:i a"
    SHORT_TIME_FORMAT: "H:i:s"
    DATETIME_FORMAT: "N j, Y g:i a"
    SHORT_DATETIME_FORMAT: "Y-m-d H:i"

  # ldap_config.py: |-
  #   from importlib import import_module

  #   from django_auth_ldap.config import LDAPSearch

  #   import ldap

  #   import yaml


  #   def _load_yaml():
  #       with open("/run/config/netbox/ldap.yaml", "r") as f:
  #           config = yaml.safe_load(f)
  #       globals().update(config)


  #   def _load_secret(name, key):
  #       path = "/run/secrets/{name}/{key}".format(name=name, key=key)
  #       with open(path, "r") as f:
  #           return f.read()


  #   # Import and return the group type based on string name
  #   def _import_group_type(group_type_name):
  #       mod = import_module("django_auth_ldap.config")
  #       try:
  #           return getattr(mod, group_type_name)()
  #       except AttributeError:
  #           return None


  #   _load_yaml()

  #   AUTH_LDAP_BIND_PASSWORD = _load_secret("netbox", "ldap_bind_password")
  #   # The following may be needed if you are binding to Active Directory.
  #   AUTH_LDAP_CONNECTION_OPTIONS = {ldap.OPT_REFERRALS: 0}
  #   AUTH_LDAP_USER_SEARCH = LDAPSearch(
  #       AUTH_LDAP_USER_SEARCH_BASEDN,
  #       ldap.SCOPE_SUBTREE,
  #       "(" + AUTH_LDAP_USER_SEARCH_ATTR + "=%(user)s)",
  #   )
  #   AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
  #       AUTH_LDAP_GROUP_SEARCH_BASEDN,
  #       ldap.SCOPE_SUBTREE,
  #       "(objectClass=" + AUTH_LDAP_GROUP_SEARCH_CLASS + ")",
  #   )
  #   AUTH_LDAP_GROUP_TYPE = _import_group_type(AUTH_LDAP_GROUP_TYPE)
  #   # Define special user types using groups. Exercise great caution when assigning superuser status.
  #   AUTH_LDAP_USER_FLAGS_BY_GROUP = {
  #       "is_active": AUTH_LDAP_REQUIRE_GROUP,
  #       "is_staff": {{ $.Values.remoteAuth.ldap.isAdminDn | quote }},
  #       "is_superuser": {{ $.Values.remoteAuth.ldap.isSuperUserDn | quote }},
  #   }
  #   # Populate the Django user from the LDAP directory.
  #   AUTH_LDAP_USER_ATTR_MAP = {
  #       "first_name": {{ $.Values.remoteAuth.ldap.attrFirstName | quote }},
  #       "last_name": {{ $.Values.remoteAuth.ldap.attrLastName | quote }},
  #       "email": {{ $.Values.remoteAuth.ldap.attrMail | quote }},
  #   }

  # ldap.yaml: |-
  #   AUTH_LDAP_SERVER_URI: {{ $.Values.remoteAuth.ldap.serverUri | quote }}
  #   AUTH_LDAP_BIND_DN: {{ $.Values.remoteAuth.ldap.bindDn | quote }}
  #   AUTH_LDAP_START_TLS: {{ toJson $.Values.remoteAuth.ldap.startTls }}
  #   LDAP_IGNORE_CERT_ERRORS: {{ toJson $.Values.remoteAuth.ldap.ignoreCertErrors }}
  #   AUTH_LDAP_USER_DN_TEMPLATE: {{ default nil $.Values.remoteAuth.ldap.userDnTemplate }}
  #   AUTH_LDAP_USER_SEARCH_BASEDN: {{ $.Values.remoteAuth.ldap.userSearchBaseDn | quote }}
  #   AUTH_LDAP_USER_SEARCH_ATTR: {{ $.Values.remoteAuth.ldap.userSearchAttr | quote }}
  #   AUTH_LDAP_GROUP_SEARCH_BASEDN: {{ $.Values.remoteAuth.ldap.groupSearchBaseDn | quote }}
  #   AUTH_LDAP_GROUP_SEARCH_CLASS: {{ $.Values.remoteAuth.ldap.groupSearchClass | quote }}
  #   AUTH_LDAP_GROUP_TYPE: {{ $.Values.remoteAuth.ldap.groupType | quote }}
  #   AUTH_LDAP_REQUIRE_GROUP: {{ $.Values.remoteAuth.ldap.requireGroupDn | quote }}
  #   AUTH_LDAP_FIND_GROUP_PERMS: {{ toJson $.Values.remoteAuth.ldap.findGroupPerms }}
  #   AUTH_LDAP_MIRROR_GROUPS: {{ toJson $.Values.remoteAuth.ldap.mirrorGroups }}
  #   AUTH_LDAP_MIRROR_GROUPS_EXCEPT: {{ toJson $.Values.remoteAuth.ldap.mirrorGroupsExcept }}
  #   AUTH_LDAP_CACHE_TIMEOUT: {{ int $.Values.remoteAuth.ldap.cacheTimeout }}
